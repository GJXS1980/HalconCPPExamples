<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>* **********************************************************</c>
<c>* 九点标定</c>
<c>* **********************************************************</c>
<c>* 变换矩阵</c>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<c>* 平移 (10, 20) 个像素</c>
<l>hom_mat2d_translate (HomMat2DIdentity, 10, 20, HomMat2DTranslate)</l>
<c>* 旋转 90 度</c>
<l>angle := rad(90)</l>
<l>hom_mat2d_rotate (HomMat2DTranslate, angle, 0, 0, HomMat2DRotate)</l>
<c>* 测试 (64, 64) → (-84, 74)</c>
<l>affine_trans_point_2d (HomMat2DRotate, 64, 64, Qx, Qy)</l>
<c></c>
<c>* **********************************************************</c>
<c>* 九点标定案例</c>
<c>* **********************************************************</c>
<l>image_x := [514.335, 515.782, 517.313, 954.505, 955.708, 957.037, 1393.84, 1395.07, 1395.99]</l>
<l>image_y := [1807.44, 1347.12, 908.469, 1808.40, 1348.22, 909.957, 1809.31, 1349.42, 911.162]</l>
<l>machine_x := [2.00, 0.00, -2.0, 2.00, 0.00, -2.0, 2.00, 0.00, -2.0]</l>
<l>machine_y := [2.00, 2.00, 2.00, 0.00, 0.00, 0.00, -2.0, -2.0, -2.0]</l>
<c>* 计算变换矩阵</c>
<c>* 实际上做了一个最小二乘</c>
<l>vector_to_hom_mat2d (image_x, image_y, machine_x, machine_y, HomMat2D)</l>
<c>* 保存变换矩阵</c>
<l>serialize_hom_mat2d (HomMat2D, SerializedItemHandle)</l>
<l>open_file ('transform_vector.hmat', 'output_binary', FileHandle)</l>
<l>fwrite_serialized_item (FileHandle, SerializedItemHandle)</l>
<l>close_file (FileHandle)</l>
<c>* 读取变换矩阵</c>
<l>open_file ('transform_vector.hmat', 'input_binary', FileHandle) </l>
<l>fread_serialized_item (FileHandle, SerializedItemHandle) </l>
<l>deserialize_hom_mat2d (SerializedItemHandle, HomMat2D_9points) </l>
<l>close_file (FileHandle)</l>
<c>* 测试</c>
<l>affine_trans_point_2d (HomMat2D_9points, 64, 64, Qx, Qy)</l>
<c></c>
<c>* **********************************************************</c>
<c>* 实际案例分析</c>
<c>* **********************************************************</c>
<l>Machine_x := machine_x</l>
<l>Machine_y := machine_y</l>
<l>dev_update_window ('off')</l>
<l>dev_set_line_width (3)</l>
<l>dev_set_draw ('margin')</l>
<c></c>
<l>read_image (Image, '/home/grantli/handeye_ws/halcon_handeye/img_test/d15.jpg')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>dev_close_window ()</l>
<l>dev_open_window (0, 0, Width/4, Height/4, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 16, 'mono', 'true', 'false')</l>
<l>dev_display(Image)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* 阈值分割</c>
<l>threshold (Image, Regions, 20, 100)</l>
<c>* 填充</c>
<l>fill_up (Regions, Regions)</l>
<c>* 连通区域</c>
<l>connection (Regions, ConnectedRegions)</l>
<c>* 特征选择</c>
<l>select_shape (ConnectedRegions, SelectedRegions, 'roundness', 'and', 0.95, 1)</l>
<c>* 按相对位置排序</c>
<l>sort_region (SelectedRegions, SortedRegions, 'first_point', 'true', 'row')</l>
<l>dev_set_colored (12)</l>
<l>dev_display (SelectedRegions)</l>
<c>* 按 F5 继续</c>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* 区域面积和中心点坐标</c>
<l>* area_center (SortedRegions, Area, Row, Column)</l>
<c>* 最小外接圆</c>
<l>* smallest_circle (SortedRegions, Row, Column, Radius)</l>
<c></c>
<c>* 圆拟合</c>
<l>gen_contour_region_xld (SortedRegions, Contours, 'center')</l>
<c></c>
<c>* fit_circle_contour_xld(Contours, Method, GenParamName, GenParamValue, Row, Column, Radius, StartPhi, EndPhi, PointOrder);</c>
<c>* Contours：输入参数，表示包含轮廓点坐标的 XLD 对象。</c>
<c>* Method：输入参数，表示拟合方法。常见的方法有 'algebraic'、'geotukey'、'max_min_dist' 等。具体的拟合方法可以参考 HALCON 的文档说明。</c>
<c>* GenParamName：输入参数，表示附加的通用参数名，用于指定拟合的选项。</c>
<c>* GenParamValue：输入参数，表示附加的通用参数值，用于设置拟合选项的值。</c>
<c>* Row、Column：输出参数，表示拟合得到的圆的圆心坐标。</c>
<c>* Radius：输出参数，表示拟合得到的圆的半径。</c>
<c>* StartPhi、EndPhi：输出参数，表示拟合得到的圆的起始角度和终止角度。</c>
<c>* PointOrder：输出参数，表示拟合得到的圆的点的顺序。</c>
<l>fit_circle_contour_xld (Contours, 'geotukey', -1, 0, 0, 3, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>gen_cross_contour_xld (Cross, Row, Column, 50, 0.785398)</l>
<l>dev_display(Cross)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c></c>
<c></c>
<c>* 转换矩阵</c>
<l>* vector_to_hom_mat2d (Row, Column, Machine_x, Machine_y, HomMat2D)</l>
<c></c>
<c>* **********************************************************</c>
<c>* 验证</c>
<c>* **********************************************************</c>
<l>read_image (Image, '/home/grantli/handeye_ws/halcon_handeye/img_test/d20.jpg')</l>
<c></c>
<l>dev_display (Image)</l>
<c>* 按 F5 继续</c>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<l>threshold (Image, Regions, 25, 160)</l>
<l>fill_up (Regions, Regions)</l>
<l>connection (Regions, ConnectedRegions)</l>
<l>count_obj (ConnectedRegions, Number)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'roundness', 'and', 0.95, 1)</l>
<l>sort_region (SelectedRegions, SortedRegions, 'first_point', 'true', 'row')</l>
<l>gen_contour_region_xld (SortedRegions, Contours, 'center')</l>
<l>fit_circle_contour_xld (Contours, 'geotukey', -1, 0, 0, 3, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>affine_trans_point_2d (HomMat2D, Row, Column, Qx, Qy)</l>
<l>gen_cross_contour_xld (Cross, Row, Column, 50, 0.785398)</l>
<l>dev_display(Cross)</l>
<c>* 画两条线并计算长度</c>
<c>* 横线</c>
<l>gen_contour_polygon_xld (Contour, [Row[1], Row[2]], [Column[1], Column[2]])</l>
<l>dev_display (Contour)</l>
<l>distance_pp (Qy[1], Qx[1], Qy[2], Qx[2], Distance)</l>
<l>disp_message (WindowHandle, Distance + 'cm', 'window', Row[1]/4+10, Column[1]/4, 'red', 'true')</l>
<c>* 竖线</c>
<l>gen_contour_polygon_xld (Contour, [Row[4], Row[6]], [Column[4], Column[6]])</l>
<l>dev_display (Contour)</l>
<l>distance_pp (Qy[4], Qx[4], Qy[6], Qx[6], Distance)</l>
<l>disp_message (WindowHandle, Distance + 'cm', 'window', Row[4]/4, Column[4]/4+10, 'red', 'true')</l>
<l>dev_update_window ('on')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
