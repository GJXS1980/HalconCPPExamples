///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////
#include "HalconCpp.h"
#include "HDevThread.h"

using namespace HalconCpp;
namespace ShapeTempMatch
{

//Note global variables cannot be shared across exports with different namespace

#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Image, ho_GrayImage, ho_Regions, ho_ModelContours;

  // Local control variables
  HTuple  hv_Width, hv_Height, hv_WindowHandle;
  HTuple  hv_WindowHandle1, hv_WindowHandle2, hv_ModelID;

  if (HDevWindowStack::IsOpen())
    CloseWindow(HDevWindowStack::Pop());

  //  读取照片  
  ReadImage(&ho_Image, "../img/image.png");
  //  获取照片的长宽
  GetImageSize(ho_Image, &hv_Width, &hv_Height);

  //  设置背景颜色
  SetWindowAttr("background_color","black");
  //  打开窗口
  OpenWindow(0,0,hv_Width*2,hv_Height*2,0,"visible","",&hv_WindowHandle);
  HDevWindowStack::Push(hv_WindowHandle);
  if (HDevWindowStack::IsOpen())
    DispObj(ho_Image, HDevWindowStack::GetActive());

  SetWindowAttr("background_color","black");
  OpenWindow(0,0,hv_Width*2,hv_Height*2,0,"visible","",&hv_WindowHandle1);
  HDevWindowStack::Push(hv_WindowHandle1);

  //  rgb转灰度图
  Rgb1ToGray(ho_Image, &ho_GrayImage);
  //  进行阈值处理
  Threshold(ho_GrayImage, &ho_Regions, 0, 186);

  SetWindowAttr("background_color","black");
  OpenWindow(0,0,hv_Width*2,hv_Height*2,0,"visible","",&hv_WindowHandle2);
  HDevWindowStack::Push(hv_WindowHandle2);
  CreateScaledShapeModel(ho_GrayImage, "auto", -0.39, 0.79, "auto", 0.9, 1.1, "auto", 
      "auto", "use_polarity", "auto", "auto", &hv_ModelID);
  GetShapeModelContours(&ho_ModelContours, hv_ModelID, 1);
  if (HDevWindowStack::IsOpen())
    DispObj(ho_ModelContours, HDevWindowStack::GetActive());

}


#ifndef NO_EXPORT_APP_MAIN


} // end namespace

int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif
    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

    ShapeTempMatch::action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}
namespace ShapeTempMatch
{
#endif

#endif

} // end namespace

