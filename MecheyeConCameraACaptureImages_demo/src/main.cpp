///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////
#include "halconcpp/HalconCpp.h"

using namespace HalconCpp;

namespace halcon_demo
{

//Note global variables cannot be shared across exports with different namespace
// Procedure declarations 
// External procedures 
// Chapter: Graphics / Output
// Short Description: Reflect the pose change that was introduced by the user by moving the mouse 
extern void analyze_graph_event (HObject ho_BackgroundImage, HTuple hv_MouseMapping, 
    HTuple hv_Button, HTuple hv_Row, HTuple hv_Column, HTuple hv_WindowHandle, HTuple hv_WindowHandleBuffer, 
    HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SelectedObjectIn, 
    HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
    HTuple hv_Labels, HTuple hv_Title, HTuple hv_Information, HTuple hv_GenParamName, 
    HTuple hv_GenParamValue, HTuple hv_PosesIn, HTuple hv_ButtonHoldIn, HTuple hv_TBCenter, 
    HTuple hv_TBSize, HTuple hv_WindowCenteredRotationlIn, HTuple hv_MaxNumModels, 
    HTuple *hv_PosesOut, HTuple *hv_SelectedObjectOut, HTuple *hv_ButtonHoldOut, 
    HTuple *hv_WindowCenteredRotationOut);
// Chapter: Graphics / Parameters
extern void color_string_to_rgb (HTuple hv_Color, HTuple *hv_RGB);
// Chapter: Graphics / Output
// Short Description: Determine the optimum distance of the object to obtain a reasonable visualization 
extern void determine_optimum_pose_distance (HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
    HTuple hv_ImageCoverage, HTuple hv_PoseIn, HTuple *hv_PoseOut);
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var, and dev_update_window to 'off'. 
extern void dev_update_off ();
// Chapter: Graphics / Output
// Short Description: Display a continue button. 
extern void disp_continue_button (HTuple hv_WindowHandle);
// Chapter: Graphics / Text
// Short Description: Write one or multiple text messages. 
extern void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
    HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box);
// Chapter: Graphics / Output
// Short Description: Replace disp_object_model_3d if there is no OpenGL available. 
extern void disp_object_model_no_opengl (HObject *ho_ModelContours, HTuple hv_ObjectModel3DID, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple hv_WindowHandleBuffer, 
    HTuple hv_CamParam, HTuple hv_PosesOut);
// Chapter: Graphics / Text
// Short Description: Display a text message. 
extern void disp_text_button (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
    HTuple hv_Row, HTuple hv_Column, HTuple hv_TextColor, HTuple hv_ButtonColor);
// Chapter: Graphics / Output
extern void disp_title_and_information (HTuple hv_WindowHandle, HTuple hv_Title, 
    HTuple hv_Information);
// Chapter: Graphics / Output
// Short Description: Render 3D object models in a buffer window. 
extern void dump_image_output (HObject ho_BackgroundImage, HTuple hv_WindowHandleBuffer, 
    HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_GenParamName, 
    HTuple hv_GenParamValue, HTuple hv_CamParam, HTuple hv_Poses, HTuple hv_ColorImage, 
    HTuple hv_Title, HTuple hv_Information, HTuple hv_Labels, HTuple hv_VisualizeTrackball, 
    HTuple hv_DisplayContinueButton, HTuple hv_TrackballCenterRow, HTuple hv_TrackballCenterCol, 
    HTuple hv_TrackballRadiusPixel, HTuple hv_SelectedObject, HTuple hv_VisualizeRotationCenter, 
    HTuple hv_RotationCenter);
// Chapter: Calibration / Camera Parameters
// Short Description: Generate a camera parameter tuple for an area scan camera with distortions modeled by the division model. 
extern void gen_cam_par_area_scan_division (HTuple hv_Focus, HTuple hv_Kappa, HTuple hv_Sx, 
    HTuple hv_Sy, HTuple hv_Cx, HTuple hv_Cy, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
    HTuple *hv_CameraParam);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the value of a specified camera parameter from the camera parameter tuple. 
extern void get_cam_par_data (HTuple hv_CameraParam, HTuple hv_ParamName, HTuple *hv_ParamValue);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the names of the parameters in a camera parameter tuple. 
extern void get_cam_par_names (HTuple hv_CameraParam, HTuple *hv_CameraType, HTuple *hv_ParamNames);
// Chapter: Graphics / Output
// Short Description: Compute the center of all given 3D object models. 
extern void get_object_models_center (HTuple hv_ObjectModel3DID, HTuple *hv_Center);
// Chapter: Graphics / Output
// Short Description: Get the center of the virtual trackback that is used to move the camera. 
extern void get_trackball_center (HTuple hv_SelectedObject, HTuple hv_TrackballRadiusPixel, 
    HTuple hv_ObjectModel3D, HTuple hv_Poses, HTuple *hv_TBCenter, HTuple *hv_TBSize);
// Chapter: Graphics / Output
// Short Description: Get the center of the virtual trackback that is used to move the camera (version for inspection_mode = 'surface'). 
extern void get_trackball_center_fixed (HTuple hv_SelectedObject, HTuple hv_TrackballCenterRow, 
    HTuple hv_TrackballCenterCol, HTuple hv_TrackballRadiusPixel, HTuple hv_Scene3D, 
    HTuple hv_ObjectModel3DID, HTuple hv_Poses, HTuple hv_WindowHandleBuffer, HTuple hv_CamParam, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple *hv_TBCenter, HTuple *hv_TBSize);
// Chapter: Graphics / Output
// Short Description: Get string extends of several lines. 
extern void max_line_width (HTuple hv_WindowHandle, HTuple hv_Lines, HTuple *hv_MaxWidth);
// Chapter: Graphics / Output
// Short Description: Project an image point onto the trackball 
extern void project_point_on_trackball (HTuple hv_X, HTuple hv_Y, HTuple hv_VirtualTrackball, 
    HTuple hv_TrackballSize, HTuple *hv_V);
// Chapter: Calibration / Camera Parameters
// Short Description: Set the value of a specified camera parameter in the camera parameter tuple. 
extern void set_cam_par_data (HTuple hv_CameraParamIn, HTuple hv_ParamName, HTuple hv_ParamValue, 
    HTuple *hv_CameraParamOut);
// Chapter: Graphics / Text
// Short Description: Set font independent of OS 
extern void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
    HTuple hv_Bold, HTuple hv_Slant);
// Chapter: Graphics / Output
// Short Description: Compute the 3D rotation from the mouse movement 
extern void trackball (HTuple hv_MX1, HTuple hv_MY1, HTuple hv_MX2, HTuple hv_MY2, 
    HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SensFactor, HTuple *hv_QuatRotation);
// Chapter: Tuple / Arithmetic
// Short Description: Calculate the cross product of two vectors of length 3. 
extern void tuple_vector_cross_product (HTuple hv_V1, HTuple hv_V2, HTuple *hv_VC);
// Chapter: Graphics / Output
// Short Description: Display 3D object models 
extern void visualize_object_model_3d (HTuple hv_WindowHandle, HTuple hv_ObjectModel3D, 
    HTuple hv_CamParam, HTuple hv_PoseIn, HTuple hv_GenParamName, HTuple hv_GenParamValue, 
    HTuple hv_Title, HTuple hv_Label, HTuple hv_Information, HTuple *hv_PoseOut);
// Local procedures 
void addOffset ();
void decode (HObject ho_X, HObject ho_Y, HObject ho_Z, HObject *ho_DecodedX, HObject *ho_DecodedY, 
    HObject *ho_DecodedZ, HTuple hv_Scale, HTuple hv_Offset);

// Procedures 
// Local procedures 
void addOffset ()
{

  // Local iconic variables

  // Local control variables

  //convert_image_type (x, rReal, 'real')
  //scale_image (rReal, rRealWithOffest, 1, offest)
  //scale_image (rRealWithOffest, rRealWithOffest, scale, 0)
  return;
}

void decode (HObject ho_X, HObject ho_Y, HObject ho_Z, HObject *ho_DecodedX, HObject *ho_DecodedY, 
    HObject *ho_DecodedZ, HTuple hv_Scale, HTuple hv_Offset)
{

  // Local iconic variables
  HObject  ho_xReal, ho_yReal, ho_zReal;


  ConvertImageType(ho_X, &ho_xReal, "real");
  ScaleImage(ho_xReal, &(*ho_DecodedX), hv_Scale, 0);
  ScaleImage((*ho_DecodedX), &(*ho_DecodedX), 1, hv_Offset);

  ConvertImageType(ho_Y, &ho_yReal, "real");
  ScaleImage(ho_yReal, &(*ho_DecodedY), hv_Scale, 0);
  ScaleImage((*ho_DecodedY), &(*ho_DecodedY), 1, hv_Offset);

  ConvertImageType(ho_Z, &ho_zReal, "real");
  ScaleImage(ho_zReal, &(*ho_DecodedZ), hv_Scale, 0);
  ScaleImage((*ho_DecodedZ), &(*ho_DecodedZ), 1, hv_Offset);
  return;
}

#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Image2d, ho_Image3d, ho_Region, ho_Contours;

  // Local control variables
  HTuple  hv_DeviceInfo, hv_Info, hv_DeviceInfos;
  HTuple  hv_MechEyeCameras, hv_AcqHandle, hv_ParameterValues;
  HTuple  hv_Width, hv_Height, hv_PixelFormat, hv_FirmwareVersion;
  HTuple  hv_ObjectModel3D, hv_NumOfPoints, hv_WindowHandle3d;
  HTuple  hv_PoseOut;

  //
  //Sample program for connecting to a Mech-Eye Industrial 3D Camera, perform image capturing, and adjust camera parameters using HALCON.
  //
  //Replace "MechEye" with the "user_name" or "unique_name" of the camera to be connected.
  //设置相机设备信息为'MechEye'
  hv_DeviceInfo = "MechEye";

  //List the available cameras.
  //列出可用的相机
  InfoFramegrabber("GigEVision2", "device", &hv_Info, &hv_DeviceInfos);
  TupleRegexpSelect(hv_DeviceInfos, hv_DeviceInfo, &hv_MechEyeCameras);
  // dev_inspect_ctrl(...); only in hdevelop

  //Stop execution if no cameras are found.
  //如果没有找到相机则停止执行
  if (0 != (HTuple(hv_MechEyeCameras.TupleLength()).TupleNot()))
  {
    // stop(...); only in hdevelop
  }

  //Connect to the camera: if "user_Name" or "unique_name" is not set in tuple_regexp_select, the first camera in the list will be connected.
  //连接相机：如果"user_Name"或"unique_name"未在tuple_regexp_select中设置，则将连接到列表中的第一个相机
  OpenFramegrabber("GigEVision2", 1, 1, 0, 0, 0, 0, "default", -1, "default", -1, 
      "false", "default", HTuple(hv_MechEyeCameras[0]), 0, -1, &hv_AcqHandle);

  //设置帧抓取参数
  GetFramegrabberParam(hv_AcqHandle, "available_param_names", &hv_ParameterValues);
  SetFramegrabberParam(hv_AcqHandle, "grab_timeout", 8000);
  SetFramegrabberParam(hv_AcqHandle, "[Stream]GevStreamMaxPacketGaps", 500);

  //Switch the "DeviceScanType" parameter to "Areascan" to obtain the 2D image.
  //切换"DeviceScanType"参数为"Areascan"以获取2D图像
  SetFramegrabberParam(hv_AcqHandle, "DeviceScanType", "Areascan");
  SetFramegrabberParam(hv_AcqHandle, "AcquisitionMode", "SingleFrame");

  //获取相机参数：宽度、高度、像素格式
  GetFramegrabberParam(hv_AcqHandle, "Width", &hv_Width);
  GetFramegrabberParam(hv_AcqHandle, "Height", &hv_Height);
  GetFramegrabberParam(hv_AcqHandle, "PixelFormat", &hv_PixelFormat);

  //Set the "2D Scanning" parameters.
  //设置"2D Scanning"参数
  SetFramegrabberParam(hv_AcqHandle, "Scan2DExposureMode", "Timed");
  SetFramegrabberParam(hv_AcqHandle, "Scan2DExposureTime", 100);

  //Obtain the 2D image from the camera.
  //获取2D图像
  GrabImage(&ho_Image2d, hv_AcqHandle);
  //Save the 2D image to the "Image2d.bmp" file.
  //将2D图像保存到"Image2d.bmp"文件
  WriteImage(ho_Image2d, "bmp", 0, "Image2d");

  //Switch the "DeviceScanType" parameter to "Areascan3D" to obtain the 3D data.
  //切换"DeviceScanType"参数为"Areascan3D"以获取3D数据
  SetFramegrabberParam(hv_AcqHandle, "DeviceScanType", "Areascan3D");

  //获取相机参数：宽度、高度、像素格式
  GetFramegrabberParam(hv_AcqHandle, "Width", &hv_Width);
  GetFramegrabberParam(hv_AcqHandle, "Height", &hv_Height);
  GetFramegrabberParam(hv_AcqHandle, "PixelFormat", &hv_PixelFormat);

  //Set the "3D Scanning" parameters.
  //设置"3D Scanning"参数
  SetFramegrabberParam(hv_AcqHandle, "Scan3DExposureCount", 1);
  SetFramegrabberParam(hv_AcqHandle, "Scan3DExposureTime", 8);

  //Set the "Depth Range" parameters (unit: mm).
  //设置"Depth Range"参数（单位：毫米）
  SetFramegrabberParam(hv_AcqHandle, "DepthLowerLimit", 1);
  SetFramegrabberParam(hv_AcqHandle, "DepthUpperLimit", 3000);

  //获取相机固件版本号
  GetFramegrabberParam(hv_AcqHandle, "DeviceFirmwareVersion", &hv_FirmwareVersion);

  //Set the "Point Cloud Processing" parameters.
  //Different camera firmware versions have different "Point Cloud Processing" parameters.
  //设置"Point Cloud Processing"参数
  //不同相机固件版本有不同的"Point Cloud Processing"参数
  if (0 != (int(hv_FirmwareVersion<HTuple("2.1.0"))))
  {
    SetFramegrabberParam(hv_AcqHandle, "CloudOutlierFilterMode", "Normal");
    SetFramegrabberParam(hv_AcqHandle, "CloudSmoothMode", "Normal");
  }
  else
  {
    SetFramegrabberParam(hv_AcqHandle, "PointCloudSurfaceSmoothing", "Normal");
    SetFramegrabberParam(hv_AcqHandle, "PointCloudOutlierRemoval", "Normal");
    SetFramegrabberParam(hv_AcqHandle, "PointCloudNoiseRemoval", "Normal");
    SetFramegrabberParam(hv_AcqHandle, "PointCloudEdgePreservation", "Normal");
  }

  //Open the 3D object model generator.
  //打开3D对象模型生成器
  SetFramegrabberParam(hv_AcqHandle, "create_objectmodel3d", "enable");
  SetFramegrabberParam(hv_AcqHandle, "add_objectmodel3d_overlay_attrib", "enable");

  //Generate the point cloud (stored in the "ObjectModel3D" variable).
  //生成点云数据（存储在"ObjectModel3D"变量中）
  GrabData(&ho_Image3d, &ho_Region, &ho_Contours, hv_AcqHandle, &hv_ObjectModel3D);

  //如果点云数据不为空，则保存点云到"PointCloud.ply"文件
  GetObjectModel3dParams(hv_ObjectModel3D, "num_points", &hv_NumOfPoints);
  if (0 != (int(hv_NumOfPoints!=0)))
  {
    //Save the point cloud to the "PointCloud.ply" file.
    WriteObjectModel3d(hv_ObjectModel3D, "ply", "PointCloud.ply", HTuple(), HTuple());
  }

  //Visualize the point cloud.
  //可视化点云
  SetWindowAttr("background_color","black");
  OpenWindow(0,0,hv_Width,hv_Height,0,"visible","",&hv_WindowHandle3d);
  HDevWindowStack::Push(hv_WindowHandle3d);
  visualize_object_model_3d(hv_WindowHandle3d, hv_ObjectModel3D, HTuple(), HTuple(), 
      HTuple(), HTuple(), HTuple(), HTuple(), HTuple(), &hv_PoseOut);
  if (HDevWindowStack::IsOpen())
    CloseWindow(HDevWindowStack::Pop());


  //清除3D对象模型
  ClearObjectModel3d(hv_ObjectModel3D);
  //关闭相机连接
  CloseFramegrabber(hv_AcqHandle);

}


#ifndef NO_EXPORT_APP_MAIN


} // end namespace

int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif

    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

    halcon_demo::action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}
namespace halcon_demo
{


#endif


#endif


} // end namespace

