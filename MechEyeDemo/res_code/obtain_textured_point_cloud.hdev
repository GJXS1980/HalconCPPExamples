<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="23.05.0.0">
<procedure name="main">
<interface/>
<body>
<c>*</c>
<c>* Sample program for obtaining a textured point cloud (as a 3D object model) from Mech-Eye Industrial 3D Camera. </c>
<c>* To use this sample, the firmware version of the camera must be 2.1.0 or above. You can use Mech-Eye Viewer to upgrade the camera firmware.</c>
<c></c>
<c>* Replace "MechEye" with the "user_name" or "unique_name" of the camera to be connected.</c>
<l>DeviceInfo := 'MechEye'</l>
<c></c>
<c>* List the available cameras.</c>
<l>info_framegrabber ('GigEVision2', 'device', Info, DeviceInfos)</l>
<l>tuple_regexp_select (DeviceInfos, DeviceInfo, MechEyeCameras)</l>
<l>dev_inspect_ctrl (DeviceInfos)</l>
<c></c>
<c>* Stop execution if no cameras are found.</c>
<l>if (not |MechEyeCameras|)</l>
<l>    stop()</l>
<l>endif</l>
<c></c>
<c>* Connect to the camera: if "user_Name" or "unique_name" is not set in tuple_regexp_select, the first camera in the list will be connected.</c>
<l>open_framegrabber ('GigEVision2', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', MechEyeCameras[0], 0, -1, AcqHandle)</l>
<c></c>
<l>get_framegrabber_param (AcqHandle, 'DeviceFirmwareVersion', FirmwareVersion)</l>
<c></c>
<c>* Stop execution if the camera firmware version is below 2.1.0.</c>
<l>if (FirmwareVersion &lt; '2.1.0')</l>
<l>    stop()</l>
<l>endif</l>
<c></c>
<c>* Switch the "DeviceScanType" parameter to "Areascan3D" to obtain the 3D data.</c>
<l>set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan3D')</l>
<c>* Obtain the available options of the "CompenentSelector" parameter.</c>
<l>get_framegrabber_param (AcqHandle, 'ComponentSelector_values', componentSelectorValues)</l>
<c></c>
<c>* Set the "ComponentSelector" parameter to "Range" to allow configuration of relevant parameters.</c>
<l>if(find(componentSelectorValues,'Range') != -1)</l>
<l>    set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Range')</l>
<c>    * Switch the "PixelFormat" parameter to "Coord3D_ABC16" to obtain the image containing all X, Y, and Z values.</c>
<l>    set_framegrabber_param (AcqHandle, 'PixelFormat', 'Coord3D_ABC16')</l>
<c>    </c>
<c>    * Reset the image size.</c>
<c>    * Obtain the maximum image width and height.</c>
<l>    get_framegrabber_param (AcqHandle, 'WidthMax', WidthMax)</l>
<l>    get_framegrabber_param (AcqHandle, 'HeightMax', HeightMax)</l>
<c>    * Reset the capture region.</c>
<l>    set_framegrabber_param (AcqHandle, 'OffsetX', 0)</l>
<l>    set_framegrabber_param (AcqHandle, 'OffsetY', 0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Width', WidthMax)</l>
<l>    set_framegrabber_param (AcqHandle, 'Height', HeightMax)</l>
<l>endif</l>
<c></c>
<c>* Enable and configure the "Intensity" component, so that the 2D image used for texturing the point cloud can be obtained.</c>
<l>if(find(componentSelectorValues,'Intensity') != -1)</l>
<c>    * Set the "ComponentSelector" parameter to "Intensity" to allow configuration of relevant parameters.</c>
<l>    set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Intensity')</l>
<c>    * Enable the "Intensity" component.</c>
<l>    set_framegrabber_param (AcqHandle, 'ComponentEnable', true)</l>
<c>    </c>
<c>    * For LSR (V4) and DEEP (V4) series: configure the "SourceSelector" parameter to obtain either the color or the monochrome 2D image.</c>
<c>    * "Color": obtain the color 2D image (default value)</c>
<c>    * "Monochrome": obtain the monochrome 2D image</c>
<l>    set_framegrabber_param (AcqHandle, 'ComponentSelector', 'Monochrome')</l>
<c>    </c>
<c>    * Reset the image size.</c>
<c>    * Obtain the maximum image width and height.</c>
<l>    get_framegrabber_param (AcqHandle, 'WidthMax', WidthMax)</l>
<l>    get_framegrabber_param (AcqHandle, 'HeightMax', HeightMax)</l>
<c>    * Reset the capture region.</c>
<l>    set_framegrabber_param (AcqHandle, 'OffsetX', 0)</l>
<l>    set_framegrabber_param (AcqHandle, 'OffsetY', 0)</l>
<l>    set_framegrabber_param (AcqHandle, 'Width', WidthMax)</l>
<l>    set_framegrabber_param (AcqHandle, 'Height', HeightMax)</l>
<l>endif</l>
<c></c>
<l>WindowScale := 0.4</l>
<l>WindowWidth := WidthMax * WindowScale</l>
<l>WindowHeight := HeightMax * WindowScale</l>
<l>dev_open_window (0, 0, WindowWidth, WindowHeight, 'black', WindowHandle3d)</l>
<c></c>
<c>* Open the 3D object model generator.</c>
<l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
<c>* Enable the addition of the intensity overlay to the generated 3D object models (that is, texturing of the point cloud using the 2D image).</c>
<l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
<c></c>
<c>* Generate the textured point cloud (stored in the "ObjectModel3D" variable).</c>
<l>grab_data(Image, Region, Contur, AcqHandle, ObjectModel3D)</l>
<c></c>
<l>get_object_model_3d_params(ObjectModel3D, 'extended_attribute_names' , ColorAttribute)</l>
<c></c>
<l>if(ColorAttribute = '&amp;overlay_gray')</l>
<l>    ColorAttribute := ['&amp;overlay_gray','&amp;overlay_gray','&amp;overlay_gray']</l>
<l>endif</l>
<c></c>
<c>* Visualize the textured point cloud.</c>
<l>visualize_object_model_3d (WindowHandle3d, ObjectModel3D, [], [], ['blue_channel_attrib', 'green_channel_attrib', 'red_channel_attrib'] , [ColorAttribute], [], [], [], PoseOut)</l>
<c> </c>
<l>dev_close_window ()</l>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
