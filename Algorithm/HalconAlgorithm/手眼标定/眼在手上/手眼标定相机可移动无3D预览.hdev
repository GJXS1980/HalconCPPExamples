<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.0.1">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>ImageNameStart := './picture/image_'</l>
<l>DataNameStart := './robotPose/'</l>
<l>CalcData:='./calcData/'</l>
<l>read_image (Image, ImageNameStart + '01')</l>
<l>dev_open_window_fit_image (Image, 0, 0, -1, -1, WindowHandle)</l>
<l>get_window_extents (WindowHandle, Row, Column, Width, Height)</l>
<l>dev_set_line_width (2)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<c>* Load the calibration plate description file.</c>
<c>* Make sure that the file is in the current directory or</c>
<c>* in HALCONROOT/calib, or use an absolute path.</c>
<l>CalTabFile := 'caltab.descr'</l>
<c>* Read the initial values for the internal camera parameters</c>
<l>read_cam_par ('innerPara.cal', StartCamParam)</l>
<c>* Create the calibration model for the camera calibration</c>
<c>* In this example the camera is used like a generic sensor</c>
<c>* to obtain the poses observed for a calibration object.</c>
<l>create_calib_data ('calibration_object', 1, 1, CamCalibDataID)</l>
<c>* Set the camera type used</c>
<l>set_calib_data_cam_param (CamCalibDataID, 0, [], StartCamParam)</l>
<c>* Set the calibration object</c>
<l>set_calib_data_calib_object (CamCalibDataID, 0, CalTabFile)</l>
<c>* </c>
<c>* Determine the 3D poses of the observed calibration object.</c>
<c>* Start the loop over the calibration images</c>
<l>imgIdx:=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]</l>
<l>indexNum:=|imgIdx|</l>
<l>PoseInOrig:=[-0.006,-0.296,12,-20,190,0,0]</l>
<l>for I := 0 to indexNum-1 by 1</l>
<l>    read_image (Image, ImageNameStart + imgIdx[I]$'02d')</l>
<l>    dev_display (Image)</l>
<c>    * Search for the calibration plate</c>
<l>    find_calib_object (Image, CamCalibDataID, 0, 0, I, [], [])</l>
<l>    get_calib_data_observ_points (CamCalibDataID, 0, 0, I, RCoord, CCoord, Index, CalObjInCamPose)</l>
<c>    * Visualize the extracted calibration marks and the estimated pose (coordinate system)</c>
<l>    dev_set_color ('yellow')</l>
<l>    disp_cross (WindowHandle, RCoord, CCoord, 6, 0)</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, StartCamParam, CalObjInCamPose, 0.01)</l>
<l>    disp_message (WindowHandle, 'Extracting data from calibration image ' + imgIdx[I] + ' of ' + indexNum, 'window', 12, 12, 'black', 'true')</l>
<l>    disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>*     stop ()</l>
<l>endfor</l>
<c>* Calibrate the camera</c>
<l>calibrate_cameras (CamCalibDataID, Errors)</l>
<c>* Query the camera parameters and the poses</c>
<l>get_calib_data (CamCalibDataID, 'camera', 0, 'params', CamParam)</l>
<l>try</l>
<c>    * Handle situation where user does not have the permission</c>
<c>    * to write in the current directory.</c>
<c>    * </c>
<c>    * Store the camera parameters to file</c>
<l>    write_cam_par (CamParam, CalcData + 'final_campar.dat')</l>
<l>catch (Exception)</l>
<c>    * Do nothing</c>
<l>endtry</l>
<c>* </c>
<c>* Create the calibration model for the hand eye calibration.</c>
<c>* All necessary data is set in the model, the hand eye calibration</c>
<c>* is performed and the results are queried.</c>
<l>create_calib_data ('hand_eye_moving_cam', 0, 0, CalibDataID)</l>
<c>* Set the opitmization method to be used</c>
<l>set_calib_data (CalibDataID, 'model', 'general', 'optimization_method', 'nonlinear')</l>
<c>* Obtain the calibrated 3D poses from the sensor (here the camera)</c>
<c>* and set the poses of the robot tool in the robot base coordinate system</c>
<c>* in the hand eye calibration data model.</c>
<l>for I := 0 to indexNum-1 by 1</l>
<c>    * Get the calibration object poses from the camera calibration</c>
<c>    * or any other 3D sensor.</c>
<l>    get_calib_data (CamCalibDataID, 'calib_obj_pose', [0,I], 'pose', CalObjInCamPose)</l>
<c>    * Set the 3D pose of the observed calibration object in the</c>
<c>    * calibration data model.</c>
<l>    set_calib_data_observ_pose (CalibDataID, 0, 0, I, CalObjInCamPose)</l>
<c>    * Read the pose of tool in robot base coordinates (ToolInBasePose)</c>
<l>    read_pose (DataNameStart + 'robot_pose_' + (imgIdx[I]-1)$'03d' + '.dat', ToolInBasePose)</l>
<c>    * Set the pose tool in robot base coordinates in the calibration data model for</c>
<c>    * the hand eye calibration.</c>
<l>    set_calib_data (CalibDataID, 'tool', I, 'tool_in_base_pose', ToolInBasePose)</l>
<l>endfor</l>
<c>* </c>
<c>* Check the input poses for consistency</c>
<l>check_hand_eye_calibration_input_poses (CalibDataID, 0.05, 0.005, Warnings)</l>
<l>if (|Warnings| != 0)</l>
<c>    * There were problem detected in the input poses. Inspect Warnings and</c>
<c>    * remove erroneous poses with remove_calib_data and remove_calib_data_observ.</c>
<l>    dev_inspect_ctrl (Warnings)</l>
<l>    stop ()</l>
<l>endif</l>
<c>* </c>
<c>* Perform the hand eye calibration and store the results to file</c>
<l>dev_display (Image)</l>
<l>disp_message (WindowHandle, 'Performing the hand-eye calibration', 'window', 12, 12, 'black', 'true')</l>
<l>calibrate_hand_eye (CalibDataID, PoseErrors)</l>
<c>* Get poses computed by the hand eye calibration</c>
<l>get_calib_data (CalibDataID, 'camera', 0, 'tool_in_cam_pose', ToolInCamPose)</l>
<l>get_calib_data (CalibDataID, 'calib_obj', 0, 'obj_in_base_pose', ObjInBasePose)</l>
<l>GetZYZDegree (ObjInBasePose, resultArr)</l>
<c>* Get the plane in base coordinate system pose by translating the</c>
<c>* ObjInBasePose by the calibration object's thickness in the</c>
<c>* z-direction.</c>
<l>set_origin_pose (ObjInBasePose, 0, 0, 0.005, PlaneInBasePose)</l>
<l>try</l>
<c>    * Save the hand eye calibration results to file</c>
<l>    write_pose (ToolInCamPose, CalcData + 'final_pose_cam_tool.dat')</l>
<l>    write_pose (ObjInBasePose, CalcData + 'final_pose_base_calplate.dat')</l>
<l>    write_pose (PlaneInBasePose, CalcData + 'final_pose_base_plane.dat')</l>
<l>catch (Exception)</l>
<c>    * Do nothing</c>
<l>endtry</l>
<l>dev_display (Image)</l>
<c>* Display calibration errors</c>
<l>Message := 'Quality of the results:      root mean square    maximum'</l>
<l>Message[1] := 'Translation part in meter:      ' + PoseErrors[0]$'6.4f' + '           ' + PoseErrors[2]$'6.4f'</l>
<l>Message[2] := 'Rotation part in degree:        ' + PoseErrors[1]$'6.4f' + '           ' + PoseErrors[3]$'6.4f'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>stop ()</l>
<c>* For the given camera, get the corresponding pose indices and calibration object indices</c>
<l>query_calib_data_observ_indices (CalibDataID, 'camera', 0, CalibObjIdx, PoseIds)</l>
<c>* Compute the pose of the calibration object in the camera coordinate</c>
<c>* system via calibrated poses and the ToolInBasePose and visualize it.</c>
<l>for I := 0 to indexNum-1 by 1</l>
<l>    read_image (Image, ImageNameStart + imgIdx[I]$'02d')</l>
<l>    dev_display (Image)</l>
<c>    * Obtain the pose of the tool in robot base coordinates used in the calibration.</c>
<c>    * The index corresponds to the index of the pose of the observation object.</c>
<l>    get_calib_data (CalibDataID, 'tool', PoseIds[I], 'tool_in_base_pose', ToolInBasePose)</l>
<l>    calc_calplate_pose_movingcam (ObjInBasePose, ToolInCamPose, ToolInBasePose, CalibObjInCamPose)</l>
<l>    dev_set_colored (3)</l>
<l>    disp_3d_coord_system (WindowHandle, CamParam, CalibObjInCamPose, 0.01)</l>
<l>    Message := 'Using the calibration results to'</l>
<l>    Message[1] := 'the coordinate system in image ' + (I + 1) + ' of ' + indexNum</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    if (I &lt; indexNum - 1)</l>
<l>        disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>        stop ()</l>
<l>    endif</l>
<l>endfor</l>
<c>* Clear the data models</c>
<l>clear_calib_data (CalibDataID)</l>
<l>clear_calib_data (CamCalibDataID)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="calc_calplate_pose_movingcam">
<interface>
<ic>
<par name="CalibObjInBasePose" base_type="ctrl" dimension="0"/>
<par name="ToolInCamPose" base_type="ctrl" dimension="0"/>
<par name="ToolInBasePose" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CalibObjInCamPose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* CalibObjInCamPose = cam_H_calplate = cam_H_tool * tool_H_base * base_H_calplate</c>
<c>*                   = ToolInCamPose*BaseInToolPose*CalibrationPose</c>
<l>pose_invert (ToolInBasePose, BaseInToolPose)</l>
<l>pose_compose (ToolInCamPose, BaseInToolPose, BaseInCamPose)</l>
<l>pose_compose (BaseInCamPose, CalibObjInBasePose, CalibObjInCamPose)</l>
<l>return ()</l>
</body>
<docu id="calc_calplate_pose_movingcam">
<short lang="en_US">compute cam_H_calplate from hand-eye calibration results</short>
<parameters>
<parameter id="CalibObjInBasePose"/>
<parameter id="CalibObjInCamPose"/>
<parameter id="ToolInBasePose"/>
<parameter id="ToolInCamPose"/>
</parameters>
</docu>
</procedure>
</hdevelop>
